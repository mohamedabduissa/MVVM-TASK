//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `FacilitiesStoryboard`.
    static let facilitiesStoryboard = _R.storyboard.facilitiesStoryboard()
    /// Storyboard `FacilityDetailsStoryboard`.
    static let facilityDetailsStoryboard = _R.storyboard.facilityDetailsStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FacilitiesStoryboard", bundle: ...)`
    static func facilitiesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.facilitiesStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FacilityDetailsStoryboard", bundle: ...)`
    static func facilityDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.facilityDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `mainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainColor")
    /// Color `secondColor`.
    static let secondColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondColor")
    /// Color `secondTextColor`.
    static let secondTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondTextColor")
    /// Color `shadowColor`.
    static let shadowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadowColor")
    /// Color `textColor`.
    static let textColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textColor")
    /// Color `thirdColor`.
    static let thirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "thirdColor")
    /// Color `thirdTextColor`.
    static let thirdTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "thirdTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "thirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "thirdTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thirdTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thirdTextColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `blank-check-box`.
    static let blankCheckBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "blank-check-box")
    /// Image `check-box`.
    static let checkBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-box")
    /// Image `exclamation-mark-in-a-circle`.
    static let exclamationMarkInACircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "exclamation-mark-in-a-circle")
    /// Image `fees`.
    static let fees = Rswift.ImageResource(bundle: R.hostingBundle, name: "fees")
    /// Image `policies`.
    static let policies = Rswift.ImageResource(bundle: R.hostingBundle, name: "policies")
    /// Image `prerequisites`.
    static let prerequisites = Rswift.ImageResource(bundle: R.hostingBundle, name: "prerequisites")
    /// Image `rectangle7`.
    static let rectangle7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle7")
    /// Image `requireddoc`.
    static let requireddoc = Rswift.ImageResource(bundle: R.hostingBundle, name: "requireddoc")
    /// Image `service`.
    static let service = Rswift.ImageResource(bundle: R.hostingBundle, name: "service")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blank-check-box", bundle: ..., traitCollection: ...)`
    static func blankCheckBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blankCheckBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-box", bundle: ..., traitCollection: ...)`
    static func checkBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exclamation-mark-in-a-circle", bundle: ..., traitCollection: ...)`
    static func exclamationMarkInACircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exclamationMarkInACircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fees", bundle: ..., traitCollection: ...)`
    static func fees(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fees, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "policies", bundle: ..., traitCollection: ...)`
    static func policies(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.policies, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "prerequisites", bundle: ..., traitCollection: ...)`
    static func prerequisites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.prerequisites, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle7", bundle: ..., traitCollection: ...)`
    static func rectangle7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "requireddoc", bundle: ..., traitCollection: ...)`
    static func requireddoc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.requireddoc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "service", bundle: ..., traitCollection: ...)`
    static func service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.service, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `FacilityCell`.
    static let facilityCell = _R.nib._FacilityCell()
    /// Nib `NetworkFailScreen`.
    static let networkFailScreen = _R.nib._NetworkFailScreen()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FacilityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.facilityCell) instead")
    static func facilityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.facilityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NetworkFailScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.networkFailScreen) instead")
    static func networkFailScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.networkFailScreen)
    }
    #endif

    static func facilityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FacilityCell? {
      return R.nib.facilityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FacilityCell
    }

    static func networkFailScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.networkFailScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 15 localization keys.
    struct localizable {
      /// en translation: AGREE
      ///
      /// Locales: en, ar
      static let agreE = Rswift.StringResource(key: "AGREE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, ar
      static let cameraLan = Rswift.StringResource(key: "camera.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ar
      static let cancelLan = Rswift.StringResource(key: "cancel.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: ERROR
      ///
      /// Locales: en, ar
      static let erroR = Rswift.StringResource(key: "ERROR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Hello
      ///
      /// Locales: en, ar
      static let hello = Rswift.StringResource(key: "Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Photo library
      ///
      /// Locales: en, ar
      static let photoLibraryLan = Rswift.StringResource(key: "photo.library.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Try again
      ///
      /// Locales: en, ar
      static let tryAgain = Rswift.StringResource(key: "try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You have a connection problem
      ///
      /// Locales: en, ar
      static let youHaveAConnectionProblem = Rswift.StringResource(key: "You have a connection problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You have a problem connecting to the Internet try Call again and try again
      ///
      /// Locales: en, ar
      static let youHaveAProblemConnectingToTheInternetTryCallAgainAndTryAgain = Rswift.StringResource(key: "You have a problem connecting to the Internet try Call again and try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: doesn't match
      ///
      /// Locales: en, ar
      static let doesnTMatch = Rswift.StringResource(key: "doesn't match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: is incorrect email
      ///
      /// Locales: en, ar
      static let isIncorrectEmail = Rswift.StringResource(key: "is incorrect email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: is required
      ///
      /// Locales: en, ar
      static let isRequired = Rswift.StringResource(key: "is required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: the length has error
      ///
      /// Locales: en, ar
      static let theLengthHasError = Rswift.StringResource(key: "the length has error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: the length must be at maximum
      ///
      /// Locales: en, ar
      static let theLengthMustBeAtMaximum = Rswift.StringResource(key: "the length must be at maximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: the length must be at minimum
      ///
      /// Locales: en, ar
      static let theLengthMustBeAtMinimum = Rswift.StringResource(key: "the length must be at minimum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)

      /// en translation: AGREE
      ///
      /// Locales: en, ar
      static func agreE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AGREE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AGREE"
        }

        return NSLocalizedString("AGREE", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, ar
      static func cameraLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera.lan"
        }

        return NSLocalizedString("camera.lan", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ar
      static func cancelLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel.lan"
        }

        return NSLocalizedString("cancel.lan", bundle: bundle, comment: "")
      }

      /// en translation: ERROR
      ///
      /// Locales: en, ar
      static func erroR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ERROR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ERROR"
        }

        return NSLocalizedString("ERROR", bundle: bundle, comment: "")
      }

      /// en translation: Hello
      ///
      /// Locales: en, ar
      static func hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hello"
        }

        return NSLocalizedString("Hello", bundle: bundle, comment: "")
      }

      /// en translation: Photo library
      ///
      /// Locales: en, ar
      static func photoLibraryLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photo.library.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photo.library.lan"
        }

        return NSLocalizedString("photo.library.lan", bundle: bundle, comment: "")
      }

      /// en translation: Try again
      ///
      /// Locales: en, ar
      static func tryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "try again"
        }

        return NSLocalizedString("try again", bundle: bundle, comment: "")
      }

      /// en translation: You have a connection problem
      ///
      /// Locales: en, ar
      static func youHaveAConnectionProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have a connection problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have a connection problem"
        }

        return NSLocalizedString("You have a connection problem", bundle: bundle, comment: "")
      }

      /// en translation: You have a problem connecting to the Internet try Call again and try again
      ///
      /// Locales: en, ar
      static func youHaveAProblemConnectingToTheInternetTryCallAgainAndTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have a problem connecting to the Internet try Call again and try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have a problem connecting to the Internet try Call again and try again"
        }

        return NSLocalizedString("You have a problem connecting to the Internet try Call again and try again", bundle: bundle, comment: "")
      }

      /// en translation: doesn't match
      ///
      /// Locales: en, ar
      static func doesnTMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("doesn't match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "doesn't match"
        }

        return NSLocalizedString("doesn't match", bundle: bundle, comment: "")
      }

      /// en translation: is incorrect email
      ///
      /// Locales: en, ar
      static func isIncorrectEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("is incorrect email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "is incorrect email"
        }

        return NSLocalizedString("is incorrect email", bundle: bundle, comment: "")
      }

      /// en translation: is required
      ///
      /// Locales: en, ar
      static func isRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("is required", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "is required"
        }

        return NSLocalizedString("is required", bundle: bundle, comment: "")
      }

      /// en translation: the length has error
      ///
      /// Locales: en, ar
      static func theLengthHasError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("the length has error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "the length has error"
        }

        return NSLocalizedString("the length has error", bundle: bundle, comment: "")
      }

      /// en translation: the length must be at maximum
      ///
      /// Locales: en, ar
      static func theLengthMustBeAtMaximum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("the length must be at maximum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "the length must be at maximum"
        }

        return NSLocalizedString("the length must be at maximum", bundle: bundle, comment: "")
      }

      /// en translation: the length must be at minimum
      ///
      /// Locales: en, ar
      static func theLengthMustBeAtMinimum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("the length must be at minimum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "the length must be at minimum"
        }

        return NSLocalizedString("the length must be at minimum", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NetworkFailScreen.validate()
    }

    struct _FacilityCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FacilityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FacilityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FacilityCell
      }

      fileprivate init() {}
    }

    struct _NetworkFailScreen: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NetworkFailScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rectangle7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rectangle7' is used in nib 'NetworkFailScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundOff' is used in storyboard 'NetworkFailScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "forthTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'forthTextColor' is used in storyboard 'NetworkFailScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'NetworkFailScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try facilitiesStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try facilityDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct facilitiesStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let facilitiesVC = StoryboardViewControllerResource<FacilitiesVC>(identifier: "FacilitiesVC")
      let name = "FacilitiesStoryboard"

      func facilitiesVC(_: Void = ()) -> FacilitiesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: facilitiesVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'FacilitiesStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'FacilitiesStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'FacilitiesStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.facilitiesStoryboard().facilitiesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'facilitiesVC' could not be loaded from storyboard 'FacilitiesStoryboard' as 'FacilitiesVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct facilityDetailsStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let facilityDetailsVC = StoryboardViewControllerResource<FacilityDetailsVC>(identifier: "FacilityDetailsVC")
      let name = "FacilityDetailsStoryboard"

      func facilityDetailsVC(_: Void = ()) -> FacilityDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: facilityDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fees", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fees' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "policies", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'policies' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "prerequisites", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'prerequisites' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "requireddoc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'requireddoc' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "service", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'service' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'time' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'FacilityDetailsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.facilityDetailsStoryboard().facilityDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'facilityDetailsVC' could not be loaded from storyboard 'FacilityDetailsStoryboard' as 'FacilityDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
